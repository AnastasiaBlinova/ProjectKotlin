package lesson_14_7

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*
import lesson_14_3.Generators
import sun.nio.cs.Surrogate.Generator

fun main(){
    val generator = StateGenerator()

    generator.square(10)
    generator.squareSuspend(30)
    generator.squareSuspend(20)

    runBlocking {
        launch {
  //          generator.stateFlow.collect{
            generator.numbersFlow.collect {
                println(it)
            }
        }
    }
}

class StateGenerator {
    private val scope = CoroutineScope(Job() + Dispatchers.Default)
    private val _stateFlow = MutableStateFlow(0)
    val stateFlow = _stateFlow.asStateFlow()

    fun square(value: Int){
        _stateFlow.value = value * value
    }

    fun squareSuspend(value: Int){
        scope.launch {
            delay(1000)
            _stateFlow.value = value * value
        }
    }

    val numbersFlow = Generators.flow.shareIn(scope = scope, SharingStarted.Eagerly, 0)
}
